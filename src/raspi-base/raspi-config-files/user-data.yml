#cloud-config
# vim: syntax=yaml
#

# This will do the inital configuration of you Raspberry Pi to run AnemIO.

# Set your hostname here.
# The manage_etc_hosts will update the hosts file entries as well
hostname: anemio-pi
manage_etc_hosts: true

users:
  - name: anemio
    gecos: "AnemIO Captain"
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    groups: users,docker,video,input
    plain_text_passwd: changeme
    lock_passwd: false
    ssh_pwauth: true
    chpasswd: { expire: false }

# Set the locale of the system.
locale: "en_US.UTF-8"

# Set the timezone.
# Value of 'timezone' must exist in /usr/share/zoneinfo.
timezone: "America/Toronto"

# Update apt packages on first boot.
# Warning: enabling these settings may make the inital boot take a long time.
# If you are worried about config issues (Wifi connectivity, etc), you may want 
# to disable the package updates, and update later once you can SSH to the device.
# package_update: true
# package_upgrade: true
# package_reboot_if_required: true

# Install any additional apt packages you need here
packages:
  - 6tunnel

# Connect to WiFi - fill in your SSID and PSK (password).
# To use unencrypted Wifi password (so people can see it in this plaintext file) - simply replace <MY_WIFI_PASSWORD_HERE> with your password.
# To use encrypted Wifi password use command `wpa_passphrase <ssid> <password>` - use output with psk=<output> (NO QUOTES!)
write_files:
  - content: |
      allow-hotplug wlan0
      iface wlan0 inet dhcp
      wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
      iface default inet dhcp
    path: /etc/network/interfaces.d/wlan0
  - content: |
      country=ca
      ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
      update_config=1
      network={
      ssid="Ninistation"
      psk=896c4ab8a9617d6bd20d182af761b8d9cfa0b52dd691c5bf49fb83795547b1ef
      proto=RSN
      key_mgmt=WPA-PSK
      pairwise=CCMP
      auth_alg=OPEN
      }
    path: /etc/wpa_supplicant/wpa_supplicant.conf

# These commands will be ran once on first boot only.
runcmd:
  # Pickup the hostname changes.
  - 'systemctl restart avahi-daemon'

  # Activate WiFi interface.
  - 'ifup wlan0'

  # Run portainer, so we can see our logs and control stuff from a UI.
  - [
    docker, service, create,
    "--detach=false",
    "--name", "portainer",
    "--publish", "9000:9000",
    "--mount", "type=volume,src=portainer_data,dst=/data",
    "--mount", "type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock",
    "portainer/portainer", "-H", "unix:///var/run/docker.sock", "--no-auth"
  ]
